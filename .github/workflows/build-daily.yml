name: Build (Dev)

on:
  push:
    branches:
      - master
      - dev

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  current_info:
    runs-on: ubuntu-latest

    name: Current Information

    outputs:
      tag: ${{ steps.release_info.outputs.tag }}
      version: ${{ steps.release_info.outputs.version }}
      date: ${{ steps.commit_date_iso8601.outputs.date }}
      sha: ${{ github.sha }}
      sha_short: ${{ steps.commit_info.outputs.sha }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.sha }}"
          fetch-depth: 0 # This is set to download the full git history for the repo

      - name: Get Commit Date (as ISO8601)
        id: commit_date_iso8601
        shell: bash
        env:
          TZ: UTC0
        run: |
          echo "date=$(git --no-pager show -s --date='format-local:%Y-%m-%dT%H:%M:%SZ' --format=%cd ${{ github.sha }})" >> "$GITHUB_OUTPUT"

      - name: Get Previous Version
        id: previous_release_info
        uses: revam/gh-action-get-tag-and-version@v1
        with:
          branch: false
          prefix: "v"
          prefixRegex: "[vV]?"
          suffixRegex: "dev"
          suffix: "dev"

      - name: Get Current Version
        id: release_info
        uses: revam/gh-action-get-tag-and-version@v1
        with:
          branch: false
          increment: "suffix"
          prefix: "v"
          prefixRegex: "[vV]?"
          suffixRegex: "dev"
          suffix: "dev"

      - id: commit_info
        name: Shorten Commit Hash
        uses: actions/github-script@v6
        with:
          script: |
            const sha = context.sha.substring(0, 7);
            core.setOutput("sha", sha);

  plugin-nuget:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dotnet: [ '8.x' ]

    name: Publish Shoko.Plugin.Abstractions Nuget

    env:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.sha }}"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Run dotnet build
        run: dotnet build -c Release Shoko.Plugin.Abstractions

      - name: Publish Shoko.Plugin.Abstractions Nuget
        uses: brandedoutcast/publish-nuget@v2.5.2
        if: ${{ env.NUGET_API_KEY != '' }}
        with:
          PROJECT_FILE_PATH: Shoko.Plugin.Abstractions/Shoko.Plugin.Abstractions.csproj
          NUGET_KEY: ${{ env.NUGET_API_KEY }}
          TAG_FORMAT: Shoko.Plugin.Abstractions-v*

  cli:
    runs-on: ubuntu-latest

    needs:
      - current_info
      - plugin-nuget

    strategy:
      matrix:
        rid: ['linux-x64', 'linux-arm64']
        dotnet: [ '8.x' ]
        build_type: ['Standalone']
        include:
          - build_type: 'Standalone'
            build_props: '--self-contained true'
          - build_type: 'Framework'
            build_props: '--no-self-contained'
            rid: 'linux-x64'

    name: Build CLI — ${{ matrix.build_type }} ${{ matrix.rid }} (Dev)

    env:
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      TMDB_API: ${{ secrets.TMDB_API }}
      AVD3_URL: ${{ secrets.AVD3_URL }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.sha }}"

      - name: Replace Sentry DSN
        if: ${{ env.SENTRY_DSN != '' }}
        shell: pwsh
        run: |
          ./.github/workflows/ReplaceSentryDSN.ps1 -dsn ${{ env.SENTRY_DSN }}

      - name: Replace TMDB API Key
        if: ${{ env.TMDB_API != '' }}
        shell: pwsh
        run: |
          ./.github/workflows/ReplaceTmdbApiKey.ps1 -apiKey ${{ env.TMDB_API }}

      - name: Replace AVD3 URL
        if: ${{ env.AVD3_URL != '' }}
        shell: pwsh
        run: |
          ./.github/workflows/ReplaceAVD3URL.ps1 -url ${{ env.AVD3_URL }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
        if: ${{ matrix.rid == 'linux-arm64' }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Run dotnet publish
        run: dotnet publish -c Release -r ${{ matrix.rid }} -f net8.0 ${{ matrix.build_props }} Shoko.CLI /p:Version="${{ needs.current_info.outputs.version }}" /p:InformationalVersion="\"channel=dev,commit=${{ needs.current_info.outputs.sha }},tag=${{ needs.current_info.outputs.tag }},date=${{ needs.current_info.outputs.date }},\""

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Shoko.CLI_${{ matrix.build_type }}_${{ matrix.rid }}
          path: Shoko.Server/bin/Release/net8.0/${{matrix.rid}}/publish/

  tray-service:
    runs-on: windows-latest

    needs:
      - current_info
      - plugin-nuget

    strategy:
      matrix:
        dotnet: [ '8.x' ]
        build_type: ['Standalone', 'Framework']
        include:
          - build_props: '-r win-x64 --self-contained true'
            build_type: 'Standalone'
          - build_dir: '/net8.0-windows/win-x64'
            build_type: 'Standalone'
          - build_props: ''
            build_type: 'Framework'
          - build_dir: '/net8.0-windows'
            build_type: 'Framework'

    name: Build Tray Service — ${{ matrix.build_type }} (Dev)

    env:
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      TMDB_API: ${{ secrets.TMDB_API }}
      AVD3_URL: ${{ secrets.AVD3_URL }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.sha }}"

      - name: Replace Sentry DSN
        if: ${{ env.SENTRY_DSN != '' }}
        shell: pwsh
        run: |
          .\\.github\\workflows\\ReplaceSentryDSN.ps1 -dsn ${{ env.SENTRY_DSN }}

      - name: Replace TMDB API Key
        if: ${{ env.TMDB_API != '' }}
        shell: pwsh
        run: |
          .\\.github\\workflows\\ReplaceTmdbApiKey.ps1 -apiKey ${{ env.TMDB_API }}

      - name: Replace AVD3 URL
        if: ${{ env.AVD3_URL != '' }}
        shell: pwsh
        run: |
          .\\.github\\workflows\\ReplaceAVD3URL.ps1 -url ${{ env.AVD3_URL }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Run dotnet publish
        run: dotnet publish -c Release ${{ matrix.build_props }} Shoko.TrayService /p:Version="${{ needs.current_info.outputs.version }}" /p:InformationalVersion="channel=dev%2ccommit=${{ needs.current_info.outputs.sha }}%2ctag=${{ needs.current_info.outputs.tag }}%2cdate=${{ needs.current_info.outputs.date }}%2c" # %2c is comma, blame windows/pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Shoko.TrayService_${{ matrix.build_type }}_win-x64
          path: Shoko.Server/bin/Release${{ matrix.build_dir }}/publish/

  tray-service-installer:
    runs-on: windows-latest

    needs:
      - current_info
      - plugin-nuget

    strategy:
      matrix:
        dotnet: [ '8.x' ]

    name: Build Tray Service — Installer (Dev)

    env:
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      TMDB_API: ${{ secrets.TMDB_API }}
      AVD3_URL: ${{ secrets.AVD3_URL }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.ref }}"

      - name: Replace Sentry DSN
        if: ${{ env.SENTRY_DSN != '' }}
        shell: pwsh
        run: |
          .\\.github\\workflows\\ReplaceSentryDSN.ps1 -dsn ${{ env.SENTRY_DSN }}

      - name: Replace TMDB API Key
        if: ${{ env.TMDB_API != '' }}
        shell: pwsh
        run: |
          .\\.github\\workflows\\ReplaceTmdbApiKey.ps1 -apiKey ${{ env.TMDB_API }}

      - name: Replace AVD3 URL
        if: ${{ env.AVD3_URL != '' }}
        shell: pwsh
        run: |
          .\\.github\\workflows\\ReplaceAVD3URL.ps1 -url ${{ env.AVD3_URL }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: Run dotnet publish
        run: dotnet publish -c Release -r win-x64 --self-contained true Shoko.TrayService /p:Version="${{ needs.current_info.outputs.version }}" /p:InformationalVersion="channel=dev%2ccommit=${{ needs.current_info.outputs.sha }}%2ctag=${{ needs.current_info.outputs.tag }}%2cdate=${{ needs.current_info.outputs.date }}%2c" # %2c is comma, blame windows/pwsh

      - name: Build Installer
        run: iscc /O".\\" ".\\Installer\\ShokoServer.iss"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Shoko.TrayService_Installer_win-x64
          path: Shoko.Setup.exe

  docker-build:
    runs-on: ubuntu-latest

    needs:
      - current_info
      - plugin-nuget

    # Allow writing to the GHCR package and reading the git repository.
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: 'amd64'
            dockerfile: 'Dockerfile'

          - arch: 'arm64'
            dockerfile: 'Dockerfile.aarch64'

    name: Build Docker Image - ${{ matrix.arch }} (Dev)

    env:
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      TMDB_API: ${{ secrets.TMDB_API }}
      AVD3_URL: ${{ secrets.AVD3_URL }}
      DOCKER_REPO: ${{ vars.DOCKER_REPO }}
      DOCKER_TAG: ${{ vars.DOCKER_TAG || 'daily' }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.sha }}"

      - name: Replace Sentry DSN
        if: ${{ env.SENTRY_DSN != '' }}
        shell: pwsh
        run: |
          ./.github/workflows/ReplaceSentryDSN.ps1 -dsn ${{ env.SENTRY_DSN }}

      - name: Replace TMDB API Key
        if: ${{ env.TMDB_API != '' }}
        shell: pwsh
        run: |
          ./.github/workflows/ReplaceTmdbApiKey.ps1 -apiKey ${{ env.TMDB_API }}

      - name: Replace AVD3 URL
        if: ${{ env.AVD3_URL != '' }}
        shell: pwsh
        run: |
          ./.github/workflows/ReplaceAVD3URL.ps1 -url ${{ env.AVD3_URL }}

      - uses: docker/setup-qemu-action@v3
        name: Set up QEMU
        with:
          platforms: arm64
        if: ${{ matrix.arch == 'arm64' }}

      - uses: docker/setup-buildx-action@v3
        name: Set up Docker Buildx

      - uses: docker/login-action@v3
        name: Log into GitHub Container Registry (GHCR)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/login-action@v3
        name: Log into Docker Hub
        if: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Disabled provenance for now, until it works with docker manifest create.
      # The manifest list produced by the new feature is incompatible with the
      # expected format used in the docker manifest create command.
      - uses: docker/build-push-action@v6
        name: Build and Push the Docker image (GHCR Only)
        if: ${{ env.DOCKER_REPO == '' || env.DOCKER_USERNAME == '' || env.DOCKER_PASSWORD == '' }}
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.DOCKER_TAG }}-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            version=${{ needs.current_info.outputs.version }}
            channel=dev
            commit=${{ needs.current_info.outputs.sha }}
            date=${{ needs.current_info.outputs.date }}
            tag=${{ needs.current_info.outputs.tag }}
          provenance: false

      - uses: docker/build-push-action@v6
        name: Build and Push the Docker image (GHCR & Docker Hub)
        if: ${{ env.DOCKER_REPO != '' && env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.DOCKER_TAG }}-${{ matrix.arch }}
            ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          build-args: |
            version=${{ needs.current_info.outputs.version }}
            channel=dev
            commit=${{ needs.current_info.outputs.sha }}
            date=${{ needs.current_info.outputs.date }}
            tag=${{ needs.current_info.outputs.tag }}
          provenance: false

  docker-push-manifest:
    runs-on: ubuntu-latest

    name: Push combined tag for both docker images

    needs:
      - docker-build

    # Allow writing to the GHCR package and reading the git repository.
    permissions:
      contents: read
      packages: write

    env:
      DOCKER_REPO: ${{ vars.DOCKER_REPO }}
      DOCKER_TAG: ${{ vars.DOCKER_TAG || 'daily' }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - uses: docker/login-action@v3
        name: Log into GitHub Container Registry
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/login-action@v3
        name: Log into Docker Hub
        if: ${{ env.DOCKER_REPO != '' && env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Create & push manifest (GHCR)
        run: |
          docker manifest create ghcr.io/${{ github.repository}}:${{ env.DOCKER_TAG }} --amend ghcr.io/${{ github.repository}}:${{ env.DOCKER_TAG }}-amd64 --amend ghcr.io/${{ github.repository}}:${{ env.DOCKER_TAG }}-arm64
          docker manifest push ghcr.io/${{ github.repository }}:${{ env.DOCKER_TAG }}

      - name: Create & push manifest (Docker Hub)
        if: ${{ env.DOCKER_REPO != '' && env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
        run: |
          docker manifest create ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }} --amend ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}-amd64 --amend ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}-arm64
          docker manifest push ${{ env.DOCKER_REPO }}:${{ env.DOCKER_TAG }}

  add-tag:
    runs-on: ubuntu-latest

    needs:
      - current_info
      - cli
      - tray-service
      - tray-service-installer
      - docker-push-manifest

    name: Add tag for pre-release

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ github.sha }}"

      - name: Push pre-release tag
        uses: rickstaa/action-create-tag@v1
        with:
          force_push_tag: true
          tag: ${{ needs.current_info.outputs.tag }}
          message: Shoko Server v${{ needs.current_info.outputs.version }} Pre-Release

  sentry-upload:
    runs-on: ubuntu-latest

    needs:
      - current_info
      - add-tag

    name: Upload version info to Sentry.io

    env:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        if: ${{ env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' }}
        with:
          ref: "${{ github.sha }}"

      # Only add the release to sentry if the build is successful.
      - name: Push Sentry Release "${{ needs.current_info.outputs.version }}"
        uses: getsentry/action-release@v1.2.1
        if: ${{ env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
          # SENTRY_URL: https://sentry.io/
        with:
          environment: 'dev'
          version: ${{ needs.current_info.outputs.version }}

  upload-site:
    runs-on: windows-latest
    continue-on-error: true

    needs:
      - sentry-upload

    name: Upload archive to site

    env:
      FTP_SERVER: ${{ secrets.FTP_SERVER }}
      FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
      FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}

    steps:
      - name: Checkout "${{ github.ref }}"
        uses: actions/checkout@v4
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' }}
        with:
          ref: "${{ github.sha }}"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' }}
        with:
          name: Shoko.TrayService_Standalone_win-x64
          path: ShokoServer

      - name: Upload archive to site
        shell: pwsh
        if: ${{ env.FTP_SERVER != '' && env.FTP_USERNAME != '' && env.FTP_PASSWORD != '' }}
        env:
          FTP_USERNAME: ${{ env.FTP_USERNAME }}
          FTP_PASSWORD: ${{ env.FTP_PASSWORD }}
          FTP_SERVER: ${{ env.FTP_SERVER }}
        run : Compress-Archive .\\ShokoServer .\\ShokoServer.zip && .\\.github\\workflows\\UploadArchive.ps1

  discord-notify:
    runs-on: ubuntu-latest

    name: Send notifications about the new dev build

    needs:
      - current_info
      - sentry-upload

    env:
      DOCKER_TAG: ${{ vars.DOCKER_TAG || 'daily' }}
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}

    steps:
      - name: Generate Changelog from Sentry Release
        id: generate_changelog
        if: ${{ env.DISCORD_WEBHOOK != '' && env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' && env.DOCKER_TAG != '' }}
        env:
          SENTRY_AUTH_TOKEN: ${{ env.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
          RELEASE_VERSION: ${{ needs.current_info.outputs.version }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "CHANGELOG<<$EOF" >> "$GITHUB_OUTPUT"
          curl -s "https://sentry.io/api/0/projects/$SENTRY_ORG/$SENTRY_PROJECT/releases/$RELEASE_VERSION/commits/" \
            -H "Authorization: Bearer $SENTRY_AUTH_TOKEN" \
            -H "Content-Type: application/json" \
            | jq -r '.[].message + "\n"' >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"

      - name: Notify Discord Users
        uses: tsickert/discord-webhook@v6.0.0
        if: ${{ env.DISCORD_WEBHOOK != '' && env.SENTRY_AUTH_TOKEN != '' && env.SENTRY_ORG != '' && env.SENTRY_PROJECT != '' && env.DOCKER_TAG != '' }}
        with:
          webhook-url: ${{ env.DISCORD_WEBHOOK }}
          embed-color: 5809492
          embed-timestamp: ${{ needs.current_info.outputs.date }}
          embed-author-name: Shoko Server | New Dev Build
          embed-author-icon-url: https://raw.githubusercontent.com/ShokoAnime/ShokoServer/v5.0.0/.github/images/Shoko.png
          embed-author-url: https://github.com/${{ github.repository }}
          embed-description: |
            **Version**: `${{ needs.current_info.outputs.version }}` (`${{ needs.current_info.outputs.sha_short }}`)

            Update by grabbing the latest dev from [the github action](https://github.com/${{ github.repository }}/actions/workflows/build-daily.yml) or through Docker using the `ghcr.io/${{ github.repository }}:${{ env.DOCKER_TAG }}` tag!

            **Changes since last build**:
            ${{ steps.generate_changelog.outputs.CHANGELOG }}

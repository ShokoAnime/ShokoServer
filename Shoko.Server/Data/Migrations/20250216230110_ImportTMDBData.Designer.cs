// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoko.Server.Data.Context;

#nullable disable

namespace Shoko.Server.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250216230110_ImportTMDBData")]
    partial class ImportTMDBData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.13");

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_AlternateOrdering", b =>
                {
                    b.Property<int>("TMDB_AlternateOrderingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_AlternateOrderingID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishOverview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HiddenEpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SeasonCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TmdbEpisodeGroupCollectionID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbEpisodeGroupCollectionID");

                    b.Property<int?>("TmdbNetworkID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbNetworkID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("TMDB_AlternateOrderingID");

                    b.HasIndex(new[] { "TmdbEpisodeGroupCollectionID", "TmdbShowID" }, "IX_TMDB_AlternateOrdering_TmdbEpisodeGroupCollectionID_TmdbShowID");

                    b.HasIndex(new[] { "TmdbShowID" }, "IX_TMDB_AlternateOrdering_TmdbShowID");

                    b.HasIndex(new[] { "TmdbEpisodeGroupCollectionID" }, "UIX_TMDB_AlternateOrdering_TmdbEpisodeGroupCollectionID")
                        .IsUnique();

                    b.ToTable("TMDB_AlternateOrdering", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_AlternateOrdering_Episode", b =>
                {
                    b.Property<int>("TMDB_AlternateOrdering_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_AlternateOrdering_EpisodeID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TmdbEpisodeGroupCollectionID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbEpisodeGroupCollectionID");

                    b.Property<string>("TmdbEpisodeGroupID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbEpisodeGroupID");

                    b.Property<int>("TmdbEpisodeID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbEpisodeID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.HasKey("TMDB_AlternateOrdering_EpisodeID");

                    b.ToTable("TMDB_AlternateOrdering_Episode", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_AlternateOrdering_Season", b =>
                {
                    b.Property<int>("TMDB_AlternateOrdering_SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_AlternateOrdering_SeasonID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HiddenEpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TmdbEpisodeGroupCollectionID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbEpisodeGroupCollectionID");

                    b.Property<string>("TmdbEpisodeGroupID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbEpisodeGroupID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.HasKey("TMDB_AlternateOrdering_SeasonID");

                    b.HasIndex(new[] { "TmdbEpisodeGroupCollectionID" }, "IX_TMDB_AlternateOrdering_Season_TmdbEpisodeGroupCollectionID");

                    b.HasIndex(new[] { "TmdbShowID" }, "IX_TMDB_AlternateOrdering_Season_TmdbShowID");

                    b.HasIndex(new[] { "TmdbEpisodeGroupID" }, "UIX_TMDB_AlternateOrdering_Season_TmdbEpisodeGroupID")
                        .IsUnique();

                    b.ToTable("TMDB_AlternateOrdering_Season", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Collection", b =>
                {
                    b.Property<int>("TMDB_CollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_CollectionID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishOverview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int>("MovieCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TmdbCollectionID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbCollectionID");

                    b.HasKey("TMDB_CollectionID");

                    b.HasIndex(new[] { "TMDB_CollectionID" }, "UIX_TMDB_Collection_TmdbCollectionID")
                        .IsUnique();

                    b.ToTable("TMDB_Collection", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Collection_Movie", b =>
                {
                    b.Property<int>("TMDB_Collection_MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Collection_MovieID");

                    b.Property<int>("Ordering")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TmdbCollectionID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbCollectionID");

                    b.Property<int>("TmdbMovieID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbMovieID");

                    b.HasKey("TMDB_Collection_MovieID");

                    b.HasIndex(new[] { "TmdbCollectionID" }, "IX_TMDB_Collection_Movie_TmdbCollectionID");

                    b.HasIndex(new[] { "TmdbMovieID" }, "IX_TMDB_Collection_Movie_TmdbMovieID");

                    b.ToTable("TMDB_Collection_Movie", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Company", b =>
                {
                    b.Property<int>("TMDB_CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_CompanyID");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TmdbCompanyID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbCompanyID");

                    b.HasKey("TMDB_CompanyID");

                    b.HasIndex(new[] { "TMDB_CompanyID" }, "IX_TMDB_Company_TmdbCompanyID");

                    b.ToTable("TMDB_Company", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Company_Entity", b =>
                {
                    b.Property<int>("TMDB_Company_EntityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Company_EntityID");

                    b.Property<int>("Ordering")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("ReleasedAt")
                        .HasColumnType("DATE");

                    b.Property<int>("TmdbCompanyID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbCompanyID");

                    b.Property<int>("TmdbEntityID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbEntityID");

                    b.Property<int>("TmdbEntityType")
                        .HasColumnType("INTEGER");

                    b.HasKey("TMDB_Company_EntityID");

                    b.HasIndex(new[] { "TmdbCompanyID" }, "IX_TMDB_Company_Entity_TmdbCompanyID");

                    b.HasIndex(new[] { "TmdbEntityType", "TmdbEntityID" }, "IX_TMDB_Company_Entity_TmdbEntityType_TmdbEntityID");

                    b.ToTable("TMDB_Company_Entity", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Episode", b =>
                {
                    b.Property<int>("TMDB_EpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_EpisodeID");

                    b.Property<DateOnly?>("AiredAt")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishOverview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<int?>("RuntimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("TmdbEpisodeID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbEpisodeID");

                    b.Property<int>("TmdbSeasonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbSeasonID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.Property<int?>("TvdbEpisodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TvdbEpisodeID")
                        .HasDefaultValueSql("NULL");

                    b.Property<double>("UserRating")
                        .HasColumnType("REAL");

                    b.Property<int>("UserVotes")
                        .HasColumnType("INTEGER");

                    b.HasKey("TMDB_EpisodeID");

                    b.HasIndex(new[] { "TmdbSeasonID" }, "IX_TMDB_Episode_TmdbSeasonID");

                    b.HasIndex(new[] { "TmdbShowID" }, "IX_TMDB_Episode_TmdbShowID");

                    b.HasIndex(new[] { "TMDB_EpisodeID" }, "UIX_TMDB_Episode_TmdbEpisodeID")
                        .IsUnique();

                    b.ToTable("TMDB_Episode", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Episode_Cast", b =>
                {
                    b.Property<int>("TMDB_Episode_CastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Episode_CastID");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsGuestRole")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ordering")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TmdbCreditID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbCreditID");

                    b.Property<int>("TmdbEpisodeID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbEpisodeID");

                    b.Property<int>("TmdbPersonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbPersonID");

                    b.Property<int>("TmdbSeasonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbSeasonID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.HasKey("TMDB_Episode_CastID");

                    b.HasIndex(new[] { "TmdbEpisodeID" }, "IX_TMDB_Episode_Cast_TmdbEpisodeID");

                    b.HasIndex(new[] { "TmdbPersonID" }, "IX_TMDB_Episode_Cast_TmdbPersonID");

                    b.HasIndex(new[] { "TmdbSeasonID" }, "IX_TMDB_Episode_Cast_TmdbSeasonID");

                    b.HasIndex(new[] { "TmdbShowID" }, "IX_TMDB_Episode_Cast_TmdbShowID");

                    b.ToTable("TMDB_Episode_Cast", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Episode_Crew", b =>
                {
                    b.Property<int>("TMDB_Episode_CrewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Episode_CrewID");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TmdbCreditID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbCreditID");

                    b.Property<int>("TmdbEpisodeID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbEpisodeID");

                    b.Property<int>("TmdbPersonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbPersonID");

                    b.Property<int>("TmdbSeasonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbSeasonID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.HasKey("TMDB_Episode_CrewID");

                    b.HasIndex(new[] { "TmdbEpisodeID" }, "IX_TMDB_Episode_Crew_TmdbEpisodeID");

                    b.HasIndex(new[] { "TmdbPersonID" }, "IX_TMDB_Episode_Crew_TmdbPersonID");

                    b.HasIndex(new[] { "TmdbSeasonID" }, "IX_TMDB_Episode_Crew_TmdbSeasonID");

                    b.HasIndex(new[] { "TmdbShowID" }, "IX_TMDB_Episode_Crew_TmdbShowID");

                    b.ToTable("TMDB_Episode_Crew", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Image", b =>
                {
                    b.Property<int>("TMDB_ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_ImageID");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RemoteFileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("UserRating")
                        .HasColumnType("REAL");

                    b.Property<int>("UserVotes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("TMDB_ImageID");

                    b.ToTable("TMDB_Image", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Movie", b =>
                {
                    b.Property<int>("TMDB_MovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_MovieID");

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ContentRatings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishOverview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbMovieID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ImdbMovieID")
                        .HasDefaultValueSql("NULL");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("OriginalLanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ProductionCountries")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateOnly?>("ReleasedAt")
                        .HasColumnType("DATE");

                    b.Property<int?>("RuntimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TmdbCollectionID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbCollectionID");

                    b.Property<int>("TmdbMovieID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbMovieID");

                    b.Property<double>("UserRating")
                        .HasColumnType("REAL");

                    b.Property<int>("UserVotes")
                        .HasColumnType("INTEGER");

                    b.HasKey("TMDB_MovieID");

                    b.HasIndex(new[] { "TmdbCollectionID" }, "IX_TMDB_Movie_TmdbCollectionID");

                    b.HasIndex(new[] { "TmdbMovieID" }, "UIX_TMDB_Movie_TmdbMovieID")
                        .IsUnique();

                    b.ToTable("TMDB_Movie", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Movie_Cast", b =>
                {
                    b.Property<int>("TMDB_Movie_CastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Movie_CastID");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordering")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TmdbCreditID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbCreditID");

                    b.Property<int>("TmdbMovieID")
                        .HasColumnType("INT")
                        .HasColumnName("TmdbMovieID");

                    b.Property<int>("TmdbPersonID")
                        .HasColumnType("INT")
                        .HasColumnName("TmdbPersonID");

                    b.HasKey("TMDB_Movie_CastID");

                    b.HasIndex(new[] { "TmdbMovieID" }, "IX_TMDB_Movie_Cast_TmdbMovieID");

                    b.HasIndex(new[] { "TmdbPersonID" }, "IX_TMDB_Movie_Cast_TmdbPersonID");

                    b.ToTable("TMDB_Movie_Cast", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Movie_Crew", b =>
                {
                    b.Property<int>("TMDB_Movie_CrewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Movie_CrewID");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TmdbCreditID")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("TmdbCreditID");

                    b.Property<int>("TmdbMovieID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbMovieID");

                    b.Property<int>("TmdbPersonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbPersonID");

                    b.HasKey("TMDB_Movie_CrewID");

                    b.HasIndex(new[] { "TmdbMovieID" }, "IX_TMDB_Movie_Crew_TmdbMovieID");

                    b.HasIndex(new[] { "TmdbPersonID" }, "IX_TMDB_Movie_Crew_TmdbPersonID");

                    b.ToTable("TMDB_Movie_Crew", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Network", b =>
                {
                    b.Property<int>("TMDB_NetworkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_NetworkID");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TmdbNetworkID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbNetworkID");

                    b.HasKey("TMDB_NetworkID");

                    b.HasIndex(new[] { "TmdbNetworkID" }, "UIX_TMDB_Network_TmdbNetworkID")
                        .IsUnique();

                    b.ToTable("TMDB_Network", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Overview", b =>
                {
                    b.Property<int>("TMDB_OverviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_OverviewID");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentID");

                    b.Property<int>("ParentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TMDB_OverviewID");

                    b.HasIndex(new[] { "ParentType", "ParentID" }, "IX_TMDB_Overview");

                    b.ToTable("TMDB_Overview", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Person", b =>
                {
                    b.Property<int>("TMDB_PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_PersonID");

                    b.Property<string>("Aliases")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly?>("BirthDay")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<DateOnly?>("DeathDay")
                        .HasColumnType("DATE");

                    b.Property<string>("EnglishBiography")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("TmdbPersonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbPersonID");

                    b.HasKey("TMDB_PersonID");

                    b.HasIndex(new[] { "TmdbPersonID" }, "IX_TMDB_Person_TmdbPersonID");

                    b.ToTable("TMDB_Person", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Season", b =>
                {
                    b.Property<int>("TMDB_SeasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_SeasonID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishOverview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HiddenEpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TmdbSeasonID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbSeasonID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.HasKey("TMDB_SeasonID");

                    b.HasIndex(new[] { "TmdbShowID" }, "IX_TMDB_Season_TmdbShowID");

                    b.HasIndex(new[] { "TmdbSeasonID" }, "UIX_TMDB_Season_TmdbSeasonID")
                        .IsUnique();

                    b.ToTable("TMDB_Season", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Show", b =>
                {
                    b.Property<int>("TMDB_ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_ShowID");

                    b.Property<int>("AlternateOrderingCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ContentRatings")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("EnglishOverview")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EnglishTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("FirstAiredAt")
                        .HasColumnType("DATE");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("HiddenEpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<DateOnly?>("LastAiredAt")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("OriginalLanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("PreferredAlternateOrderingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("PreferredAlternateOrderingID")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("ProductionCountries")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<int>("SeasonCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.Property<int?>("TvdbShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TvdbShowID")
                        .HasDefaultValueSql("NULL");

                    b.Property<double>("UserRating")
                        .HasColumnType("REAL");

                    b.Property<int>("UserVotes")
                        .HasColumnType("INTEGER");

                    b.HasKey("TMDB_ShowID");

                    b.HasIndex(new[] { "TmdbShowID" }, "UIX_TMDB_Show_TmdbShowID")
                        .IsUnique();

                    b.ToTable("TMDB_Show", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Show_Network", b =>
                {
                    b.Property<int>("TMDB_Show_NetworkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_Show_NetworkID");

                    b.Property<int>("Ordering")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TmdbNetworkID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbNetworkID");

                    b.Property<int>("TmdbShowID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("TmdbShowID");

                    b.HasKey("TMDB_Show_NetworkID");

                    b.ToTable("Tmdb_Show_Network", (string)null);
                });

            modelBuilder.Entity("Shoko.Server.Models.TMDB.TMDB_Title", b =>
                {
                    b.Property<int>("TMDB_TitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("TMDB_TitleID");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ParentID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParentID");

                    b.Property<int>("ParentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TMDB_TitleID");

                    b.HasIndex(new[] { "ParentType", "ParentID" }, "IX_TMDB_Title");

                    b.ToTable("TMDB_Title", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}

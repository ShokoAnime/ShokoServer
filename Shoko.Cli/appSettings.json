{
	"Logging": {
		"LogLevel": {
			"Default": "Information"
		},
		"NLog": {
			//Enables the possibility to use logging scopes. They can be added to the layout with ${mdlc:<name>}
			//Example:
			//using (logger.BeginScope(new[] { new KeyValuePair<string, object>("userid", request.UserId) }))
			//{
			//    logger.LogDebug("My log message");
			//}
			//LayoutDefinition: layout="${longdate} ${logger} ${message}${exception:format=ToString}, user: ${mdlc:userid}"
			"IncludeScopes": true,
			"ShutdownOnDispose": false
		}
	},
	"NLog": {
		"autoReload": true,
		"throwConfigExceptions": true,
		//TODO: Logging is hardwired in shoko.server in a way that if there is no logger "file" present or it is not if type file an exception is thrown.
		//TODO: This has to be fixed. After that AsyncLogging can be enabled
		//"default-wrapper": {
		//	"type": "AsyncWrapper",
		//	"overflowAction": "Block"
		//},
		"targets": {
			"console": {
				"type": "AsyncWrapper", //Workaround so that at least console log is async
				"overflowAction": "Block",
				"target": {
					"type": "ColoredConsole",
					"layout": "${shortdate}| ${logger} |--- ${message}"
				}
			},
			//TODO: LogRotation should be handled by the Logging framework not the application.
			"file": {
				"type": "File",
				"fileName": "${basedir}/logs/${shortdate}.txt",
				"layout": "[${longdate}] ${level}|${stacktrace} ${message}"
			}
		},
		"rules": [
			{
				"logger": "Microsoft.Hosting.Lifetime",
				"minLevel": "Info",
				"writeTo": "console",
				"final": true
			},
			{
				"logger": "Microsoft.*",
				"maxLevel": "Info",
				"final": true
			},
			{
				"logger": "*",
				"minLevel": "Info",
				"writeTo": "console, file"
			}
		]
	}
}